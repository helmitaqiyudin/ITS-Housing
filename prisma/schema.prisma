// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum Role {
    user
    admin
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role?     @default(admin)
    accounts      Account[]
    sessions      Session[]
    house         House[]
}

model House {
    id                      String              @id @default(uuid())
    blok                    String              @unique
    id_tenaga               String
    luas_tanah              Int
    luas_bangunan           Int
    dokumen_kepemilikan     String
    tanggal_sk_rektor       DateTime
    sumber_dana_pembangunan String
    golongan                String
    sk_golongan             String
    nomor_hum               String?
    kode_hum                String?
    tarif_sewa              Int?
    alamat                  String
    boundary                String?
    created_at              DateTime            @default(now())
    updated_at              DateTime            @updatedAt
    user                    User?                @relation(fields: [id_tenaga], references: [id], onDelete: Cascade)
    catatan                 CatatanPenghunian[]

    @@index([id_tenaga])
}

model CatatanPenghunian {
    id         String   @id @default(uuid())
    blok       String
    judul      String
    catatan    String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
    house      House    @relation(fields: [blok], references: [blok], onDelete: Cascade)

    @@index([blok])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
